/**
 * Generated by orval v7.1.1 🍺
 * Do not edit manually.
 * Interview API
 * Documentation for interview endpoints
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { useCallback } from "react";
import type { TodaysStatsResponse } from "../../types";
import { useCustomInstance } from "../../mutator/useCustomInstance";
import type { ErrorType } from "../../mutator/useCustomInstance";

/**
 * @summary Get today's stats
 */
export const useGetApiStatsTodaysStatsHook = () => {
  const getApiStatsTodaysStats = useCustomInstance<TodaysStatsResponse>();

  return useCallback(
    (signal?: AbortSignal) => {
      return getApiStatsTodaysStats({
        url: `https://interview-api-8icc.onrender.com/api/stats/todays-stats`,
        method: "GET",
        signal,
      });
    },
    [getApiStatsTodaysStats],
  );
};

export const getGetApiStatsTodaysStatsQueryKey = () => {
  return [`https://interview-api-8icc.onrender.com/api/stats/todays-stats`] as const;
};

export const useGetApiStatsTodaysStatsQueryOptions = <
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiStatsTodaysStatsHook>>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiStatsTodaysStatsHook>>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiStatsTodaysStatsQueryKey();

  const getApiStatsTodaysStats = useGetApiStatsTodaysStatsHook();

  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiStatsTodaysStatsHook>>>> = ({ signal }) =>
    getApiStatsTodaysStats(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<ReturnType<typeof useGetApiStatsTodaysStatsHook>>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiStatsTodaysStatsQueryResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof useGetApiStatsTodaysStatsHook>>>
>;
export type GetApiStatsTodaysStatsQueryError = ErrorType<void>;

export function useGetApiStatsTodaysStats<
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiStatsTodaysStatsHook>>>,
  TError = ErrorType<void>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiStatsTodaysStatsHook>>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<ReturnType<typeof useGetApiStatsTodaysStatsHook>>>, TError, TData>,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiStatsTodaysStats<
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiStatsTodaysStatsHook>>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiStatsTodaysStatsHook>>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<ReturnType<typeof useGetApiStatsTodaysStatsHook>>>, TError, TData>,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiStatsTodaysStats<
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiStatsTodaysStatsHook>>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiStatsTodaysStatsHook>>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get today's stats
 */

export function useGetApiStatsTodaysStats<
  TData = Awaited<ReturnType<ReturnType<typeof useGetApiStatsTodaysStatsHook>>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiStatsTodaysStatsHook>>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = useGetApiStatsTodaysStatsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}
