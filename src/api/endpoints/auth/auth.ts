/**
 * Generated by orval v7.1.1 🍺
 * Do not edit manually.
 * Interview API
 * Documentation for interview endpoints
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from "@tanstack/react-query";
import type { MutationFunction, UseMutationOptions, UseMutationResult } from "@tanstack/react-query";
import { useCallback } from "react";
import type { AuthResponseDto, LoginRequestDto } from "../../types";
import { useCustomInstance } from "../../mutator/use-custom-instance";
import type { ErrorType } from "../../mutator/use-custom-instance";

/**
 * @summary User login
 */
export const usePostApiAuthLoginHook = () => {
  const postApiAuthLogin = useCustomInstance<AuthResponseDto>();

  return useCallback(
    (loginRequestDto: LoginRequestDto) => {
      return postApiAuthLogin({
        url: `https://interview-api-8icc.onrender.com/api/auth/login`,
        method: "POST",
        headers: { "Content-Type": "application/json" },
        data: loginRequestDto,
      });
    },
    [postApiAuthLogin],
  );
};

export const usePostApiAuthLoginMutationOptions = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostApiAuthLoginHook>>>,
    TError,
    { data: LoginRequestDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<ReturnType<typeof usePostApiAuthLoginHook>>>,
  TError,
  { data: LoginRequestDto },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const postApiAuthLogin = usePostApiAuthLoginHook();

  const mutationFn: MutationFunction<
    Awaited<ReturnType<ReturnType<typeof usePostApiAuthLoginHook>>>,
    { data: LoginRequestDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiAuthLogin(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiAuthLoginMutationResult = NonNullable<
  Awaited<ReturnType<ReturnType<typeof usePostApiAuthLoginHook>>>
>;
export type PostApiAuthLoginMutationBody = LoginRequestDto;
export type PostApiAuthLoginMutationError = ErrorType<void>;

/**
 * @summary User login
 */
export const usePostApiAuthLogin = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<ReturnType<typeof usePostApiAuthLoginHook>>>,
    TError,
    { data: LoginRequestDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<ReturnType<typeof usePostApiAuthLoginHook>>>,
  TError,
  { data: LoginRequestDto },
  TContext
> => {
  const mutationOptions = usePostApiAuthLoginMutationOptions(options);

  return useMutation(mutationOptions);
};
